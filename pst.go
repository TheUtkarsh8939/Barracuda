package main

import "github.com/corentings/chess"

// Flip the board for black (mirror white's PST)
func mirrorBoard(pst [64]int) [64]int {
	var mirrored [64]int
	for i := 0; i < 64; i++ {
		rank := i / 8
		file := i % 8
		mirrored[i] = pst[(7-rank)*8+file]
	}
	return mirrored
}

func initPST() map[chess.Color]map[chess.PieceType][64]int {
	PieceSquareTables := map[chess.Color]map[chess.PieceType][64]int{
		chess.Black: {
			chess.Pawn: {
				0, 0, 0, 0, 0, 0, 0, 0,
				30, 0, 0, 0, 0, 0, 0, 30,
				20, 0, 0, 0, 0, 0, 0, 20,
				10, 0, 0, 0, 0, 0, 0, 10,
				-5, 0, 0, 20, 20, 0, 0, -5,
				-5, 5, 10, 0, 0, 10, 5, -5,
				0, 5, 0, 0, 0, 0, 5, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
			},
			chess.Knight: {
				-50, -40, -30, -30, -30, -30, -40, -50,
				-40, -20, 20, 5, 5, 20, -20, -40,
				-30, 5, 10, 15, 15, 10, 5, -30,
				-30, 0, 15, 20, 20, 15, 0, -30,
				-30, 5, 15, 20, 20, 15, 5, -30,
				-30, 0, 20, 15, 15, 20, 0, -30,
				-40, -20, 0, 0, 0, 0, -20, -40,
				-50, -40, -30, -30, -30, -30, -40, -50,
			},
			chess.Bishop: {
				-20, -10, -10, -10, -10, -10, -10, -20,
				-10, 5, 0, 0, 0, 0, 5, -10,
				-10, 10, 10, 10, 10, 10, 10, -10,
				-10, 0, 10, 10, 10, 10, 0, -10,
				-10, 5, 10, 10, 10, 10, 5, -10,
				-10, 0, 5, 10, 10, 5, 0, -10,
				-10, 10, 0, 0, 0, 0, 10, -10,
				-20, -10, -10, -10, -10, -10, -10, -20,
			},
			chess.Rook: {
				0, 0, 0, 5, 5, 0, 0, 0,
				-5, 0, 0, 0, 0, 0, 0, -5,
				-5, 0, 0, 0, 0, 0, 0, -5,
				-5, 0, 0, 0, 0, 0, 0, -5,
				-5, 0, 0, 0, 0, 0, 0, -5,
				-5, 0, 0, 0, 0, 0, 0, -5,
				5, 10, 10, 10, 10, 10, 10, 5,
				5, 0, 0, 0, 0, 0, 0, 5,
			},
			chess.Queen: {
				-20, -10, -10, -5, -5, -10, -10, -20,
				-10, 0, 0, 0, 0, 0, 0, -10,
				-10, 0, 5, 5, 5, 5, 0, -10,
				-5, 0, 5, 5, 5, 5, 0, -5,
				0, 0, 5, 5, 5, 5, 0, -5,
				-10, 5, 5, 5, 5, 5, 0, -10,
				-10, 0, 5, 0, 0, 0, 0, -10,
				-20, -10, -10, -5, -5, -10, -10, -20,
			},
			chess.King: {
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0,
			},
		},
		chess.White: {},
	}
	// Generate Black's PST by mirroring White's PST
	for piece, table := range PieceSquareTables[chess.Black] {
		PieceSquareTables[chess.White][piece] = mirrorBoard(table)
	}
	return PieceSquareTables
}
